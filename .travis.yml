sudo: required

language: cpp

stages:
  - setup
  - compile
  - name: buildrpm
  - test
  - coverage
  - name: docs
    if: ( ( branch = master ) OR ( tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|alpha|dev)([0-9]+$))?|(-git[0-9a-z]{6,8})?$ ) )
  - name: prerelease
    if: tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc)([0-9]+))$
  - name: devrelease
    if: tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc)([0-9]+))$
  - name: release
    if: tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)$
  - name: deployment
    if: tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|alpha|dev)([0-9]+$))?|(-git[0-9a-z]{6,8})?$

.docs: &docs_cond
  if: ( ( branch = master ) OR ( tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|alpha|dev)([0-9]+$))?|(-git[0-9a-z]{6,8})?$ ) )
.draftrelease: &draftrelease_cond
  condition: $TRAVIS_TAG =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|dev|alpha)([0-9]+))?(-git[0-9a-z]{6,8})$
.prerelease:   &prerelease_cond
  condition: $TRAVIS_TAG =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc)([0-9]+))$
.devrelease:   &devrelease_cond
  condition: $TRAVIS_TAG =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(dev|alpha)([0-9]+))$
.release:      &release_cond
  condition: $TRAVIS_TAG =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)$
# .deploy:       &deploy_cond
#   condition: $TRAVIS_TAG =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|alpha|dev)([0-9]+$))?|(-git[0-9a-z]{6,8})?$
.deploy:       &deploy_cond
  if: tag =~ ^v?(.)?([0-9]+).([0-9]+).([0-9]+)(-(pre|rc|alpha|dev)([0-9]+$))?|(-git[0-9a-z]{6,8})?$

env:
  global:
    ## Encrypted variables:
    ##  * CHANGELOG_GITHUB_TOKEN: for running github_changelog_generator without API rate limits
    secure: "cWz6NmAZFtp30xIO8ieP10x7M8RLjjh1xNlu5qEgqrb9YhQLFxdIIObBw+3DcbaFBfwp0pzm4omZe8y2Lmda30ESBOrL2pX60r550Rx/JgqydFGfryRuKPLhtGyzQ3duVKIjRlKrKLUAoBzDhgM4v8rtGLaoiOrlK5JVgicrye3AgH7voOYys5sOJ/+TpAwa44690F+LCDLCOredryXMYmOo1ZNFRyq9HrEVSBeQ+1unBC6voY7NPtvGZYk8z0PeDOOX32nkZP5AEEOnQk4rl6CCALpnC5Y7ypBDi3AkFqCocomocmZUr4/m3QpERFxsZiYQD9uV93YHyqfCeDA/jA4Pgh6PiPdOvr7409z3H/CZWENInqtMMnvOPFxzO8CUxrtUamyuAgihq6VP6nKO++fX6ZfvwqxtJs8pqE0MorfIZo8vAFQ+SeiaIAEq1njL3b4/8hrQifb912KNB3ePnQSzDnxefYeu0dotK/ACUrkLxGl5Qa9USrpy6r7cVTVH8DJfqk10xIVX2tLlc6ydekLCtNnMFAAg0+PvEb9r/g+Hc1civfUg4mDGVji6N4kqkHuBUZfw+c4uSztSdNDNqQnQDYdrbJR1K2TkQhSP5ShWsfmz42lFiYbVbvmwojV1fH2RXARBy4f6IfMCbrGQec3O0VIPGl8MmW9ThfEfuqY="
    secure: "TZ1l7ZB/nCsCm3HjzoVvQVm6nvN0NvvDVfCUvAkaZVdLtDARzkFAow8kXpcfm/dNBC/XtJaqHiRx3uJPiMdLYw48UpKfkAceWvumoiwyZf4YaymhA0W0lwX/Lqg1kNURv9nC0Zh+kKGMQrgSAYvuKpWrkspxOGbu7F7r1ZuDPS9MKPEgInLwgSZqyrzdxdw1IWQenSPoIbNs72S2avdOTsR7uuATKNyJCAreqyRBbJnqvl8omMd2ZNaz5w2meK07RyaQouIIFqhihbK+cR/CSKE98aEXTdYVNb/wM+LjelnXSUYSRT8FTcXFQ4y6xoSXybhJrrIZ/m2d1Ac9dP3wbYt1sljlbyefp93cOJtTXgCfwiBKCS0whC1MrSq9irgWJwRVctosrUIHtwDMYH6AKzdOhHGrCbL5nwG8CmeulN0GtRChjKk1REWxvwpMMxKSGlgCiSElkhNw7v2xCaWQDCd+N2HU7asuJtAOoTvpRqxYzzXywWgmDiEw7V2RHqNTGo/hrctIqwMdIS7sZWZZ0wC7GUC6dcTGqFlIqf7wH4pVhpBZzDwxItmJ3AXJuv3xmZBXNXhXJorBpOyBio3LcoWVaLBfXfX1rgYMR2IJOPx8en9GhEhpDkTyhymkyy+NOEIJBnfJh5zvzEX7Nz3WbEj3Bfp0mOAj85Jx4h7uko0="
      
  matrix:
    # what are the realistic things we want to test against?
    # C/C++ compiler versions:
      # gcc: 447, 485, 492, 531, 631, 64X, 71X, 721?
      # clang: 32, 34, 35, 36, 37, 38, 39, 4, 5, 6, 7?
      # libc++ vs libstdc++
      # c++11, c++14, c++17, etc
    # xDAQ release versions:
      # cmsos13 on slc6
      # cmsos14 on cc7
      # cmsos15 on (cc7, cc8?)
    # Python versions
      # 26, 27, 32, 33, 34, 35, 36, pypy27, pypy32, pypy35?
    # needed vars:
      # PYTHON_VERSON
      # CLANG_VERSON
      # GCC_VERSON
      # COMPILER = CLANG/GCC
    - OS_TYPE=centos OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/base:slc6
    - OS_TYPE=centos OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/base:cc7
    # - OS_TYPE=centos OS_VERSION=8 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/base:cc8

services:
  - docker

before_install:
  - ./.ci/docker.sh setup ${DOCKER_IMAGE}
  - sleep 2
  - ./.ci/docker.sh start ${DOCKER_IMAGE}
  - DOCKER_CONTAINER_ID=$(docker ps | grep ${DOCKER_IMAGE} | awk '{print $1}')
  - echo DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID

script:
  - echo 'Running test stage on docker container $DOCKER_CONTAINER_ID'
  - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec ". /home/daqbuild/cmsgemos/.ci/travis.sh ${OS_VERSION} ${PY_VER} ${ROOT_VER}"

## Defaults, applied to the 'test' stage
after_success:
  - ./.ci/docker.sh stop ${DOCKER_IMAGE}

after_failure: skip

after_script: skip

# How to link the environments/outputs from above with the jobs below?
.rpmbuild: &rpmbuild_template
  before_install:
    - ./.ci/docker.sh setup ${DOCKER_IMAGE}
    - sleep 2
    - ./.ci/docker.sh start ${DOCKER_IMAGE}
    - DOCKER_CONTAINER_ID=$(docker ps | grep ${DOCKER_IMAGE} | awk '{print $1}')
    - echo DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID
    - sudo chown :daqbuild -R .
    - gem install github_changelog_generator
  script:
    - echo 'Running build stage on docker container $DOCKER_CONTAINER_ID'
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "/home/daqbuild/cmsgemos/.ci/travis.sh 'make -j8'" || travis_terminate
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "/home/daqbuild/cmsgemos/.ci/travis.sh 'make rpm'" || travis_terminate
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "rpm -q --filesbypkg -p /home/daqbuild/cmsgemos/rpm/*.rpm" || travis_terminate
    - find ./rpm -iname '*.rpm' -o -iname '*.tar.gz' -o -iname '*.tbz2'
  after_success:
    - echo "Testing the installation of the package"
    - virtualenv building -p python --system-site-packages
    - . building/bin/activate
    - pip install rpm/*.zip
    - echo "Install the dependencies"
    - echo "Run the predefined test"
    - ./.ci/docker.sh stop ${DOCKER_IMAGE}

.release: &release_template
  skip_cleanup: true
  # publish to Github releases
  provider: releases
  api_key:
    secure: ""
  file_glob: true
  file:
    - LICENSE
    - README.md
    - CHANGELOG.md
    - "./rpm/*.tar.gz"
    - "./rpm/*.tgz"
    - "./rpm/*.tbz2"
    - "./rpm/*.rpm"
  ## pre-releases and draft releases for tags with pre/alpha/dev/gitHASH in the name
  # draft: true # for tags with dev/alpha in the name, or
  # prerelease: true # for tags with pre in the name
  ## only deploy full release when the tag exactly matches vX.Y.Z (with or without the v)
  prerelease: true
  draft: false
  name: $TRAVIS_TAG
  body: "Please fill me, preferably with release notes for $TRAVIS_TAG"
  on:
    tags: true
  #   before_deploy:
  #     #Set up git user name and tag this commit
  #     - git config --local user.name "YOUR GIT USER NAME"
  #     - git config --local user.email "YOUR GIT USER EMAIL"
  #     # ?create the changelog
  #     # ?update release notes
  #     # ?run our cmsgemostag script instead?
  #     # Sign the tags
  #   # - git tag "$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)"
  after_deploy: skip
    # - push docs to SaaS docs website, readthedocs style, with versioning
    # - push API to SaaS docs website, Doxygen style, with versioning
    # - push RPMs to repo on openstack SaaS, updates and devel-testing depending on tag

jobs:
  include:
    - stage: buildrpm
      env:
        - OS_TYPE=centos
        - PY_VER=python
        - OS_VERSION=6
        - DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
      <<: *rpmbuild_template

    - stage: buildrpm
      env:
        - OS_TYPE=centos
        - PY_VER=python
        - OS_VERSION=7
        - DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
      <<: *rpmbuild_template

    - stage: docs
      before_script: skip
      before_install: skip
      script:
        - ls -laZ
      after_success: skip

    - stage: coverage
      before_script: skip
      before_install: skip
      script: skip
      after_success:
        - sudo pip install -U codecov
        # - coverage run -a scripta.py
        - codecov
        - bash <(curl -s https://codecov.io/bash) && echo "Uploaded code coverage"

    - stage: deployment
      <<: *rpmbuild_template
      before_deploy:
        - echo "Preparing ChangeLog"
        - if ! test -z ${CHANGELOG_GITHUB_TOKEN+x}; then github_changelog_generator; else echo "Not updating changelog"; fi
        - sudo chown :daqbuild -R .
        - ls -laZ CHANGELOG.md
      deploy:
        - <<: *release_template
          prerelease: false
          draft: false
          on:
            tags: true
            <<: *release_cond
          after_deploy:
            - echo "Successfully deployed prerelease"
        - <<: *release_template
          on:
            tags: true
            <<: *prerelease_cond
          after_deploy:
            - echo "Successfully deployed prerelease"
        - <<: *release_template
          prerelease: false
          draft: true
          on:
            tags: true
            <<: *draftrelease_cond
          after_deploy:
            - echo "Successfully deployed draft release"
        - <<: *release_template
          prerelease: true
          on:
            tags: true
            <<: *devrelease_cond
          after_deploy:
            - echo "Successfully deployed devrelease"
